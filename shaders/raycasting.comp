#version 450
#extension GL_ARB_separate_shader_objects : enable

#define WIDTH 1600
#define HEIGHT 900
#define WORKGROUP_SIZE 32
layout (local_size_x = WORKGROUP_SIZE, local_size_y = WORKGROUP_SIZE, local_size_z = 1) in;

layout(push_constant) uniform constants
{
    mat4 model;
    mat4 view;
    mat4 projection;
    vec4 lookat;
    float time;
    float epsilon;
    int max_passes;
} PushConstants;
#define EPSILON PushConstants.epsilon
//#define EPSILON 0.0005
#define MAX_PASSES PushConstants.max_passes

struct Pixel
{
    vec4 value;
};

struct cast_result {
    bool valid;
    bool reflective;
    vec4 pos;
    vec4 normal;
    vec3 color;
    float depth;
};

layout (binding = 0, rgba8) uniform image2D resultImage;

float sdBox(vec3 p, vec3 b)
{
    vec3 q = abs(p) - b;
    return length(max(q, 0.0)) + min(max(q.x, max(q.y, q.z)), 0.0);
}

float sphereSdf(vec3 p)
{
    return length(p) - 1;
}

float DE(vec4 z)
{
    return length(z);
}

float sceneSDF(vec4 p)
{
    //    return max(-sphereSdf(p), sdBox(p, vec3(0.75)));

    return DE(p);
}


cast_result cast_ray(vec4 origin, vec4 direction)
{
    //        vec3 spherepos = vec3(sin(PushConstants.time * 3.14 / 4) * 5, 2, 0);
    vec4 spherepos = vec4(0, 0, 0, 0);
    //    vec3 spherepos = vec3(0, 2, 0);
    float sphereradius = 1.0f;

    float t = 0;
    bool overshot = false;
    for (int i=0; i<MAX_PASSES; i++)
    {
        float dist = sceneSDF(origin + direction * t - spherepos);
        if (dist >= 0.05f)
        {
            dist -= 0.05f;
        }
        else
        {
            break;
        }

        t += dist;

        if (dist <= EPSILON) {
            break;
        }

        if (dist >= 10 || i == MAX_PASSES - 1) {
            overshot = true;
        }

    }

    cast_result result;
    result.reflective = false;
    result.valid = true;
    result.color = vec3(0);
    result.depth = -1;

    if (!overshot) {
        result.pos = origin + direction * t;
        //result.normal = estimateNormal(result.pos);
        result.normal = normalize(result.pos - origin);
        result.color = vec3(0.5, 0.5, 0);
        //        result.color = result.normal;
        result.depth = t;
        //                result.reflective = true;
    }

    return result;
}

void main()
{
    // Terminate unnecessary workgroup threads
    if (gl_GlobalInvocationID.x >= WIDTH || gl_GlobalInvocationID.y >= HEIGHT)
    return;

    // Camera setup
    float x = float(gl_GlobalInvocationID.x) / float(WIDTH);
    float y = float(gl_GlobalInvocationID.y) / float(HEIGHT);

    vec2 uv = vec2(x, y) * 2.0 - 1.0;
    uv.x *= WIDTH / float(HEIGHT);
    //    uv.y *= HEIGHT / float(WIDTH);

    float near = 1.0f;
    float far = 100.0f;
    //    vec3 worldpos = ((-(PushConstants.model * PushConstants.view * PushConstants.projection) * (vec4(uv, 1, 1) * near))).xyz;
    vec4 worldpos4 = ((inverse(PushConstants.model) * inverse(PushConstants.view) * inverse(PushConstants.projection) * vec4(uv, -1, 1)));
    vec3 worldpos = worldpos4.xyz / worldpos4.w * near;
    vec3 worlddir = normalize((-(PushConstants.view * PushConstants.projection) * vec4(-uv * (far - near), far + near, far - near)).xyz);
    //    vec3 worlddir = vec3(1);

    // Raycasting
    //    vec4 pos = worldpos;
    vec3 color = vec3(0);
    if (x < 0.5 && y < 0.5) {
        uv = vec2(x, y) * 2.0 * 2.0 - 1.0;
        uv.x *= WIDTH / float(HEIGHT);
        vec4 pos = vec4(0, 0, 0, -1);
        vec4 dir = normalize(vec4(PushConstants.lookat - pos));
        dir = normalize(dir + vec4(uv.x, 0, uv.y, 0));

        cast_result res = cast_ray(pos, dir);
        if (res.valid) {
            color += res.normal.xyz * 15;
        }
    } else if (x >= 0.5 && y < 0.5) {
        uv = vec2(x - 0.5, y) * 2.0 * 2.0 - 1.0;
        uv.x *= WIDTH / float(HEIGHT);
        vec4 pos = vec4(0, 0, 0, 2);
        //    vec3 dir = worlddir;
        uv /= 30.0;
        vec4 dir = normalize(vec4(PushConstants.lookat - pos));
        dir = normalize(dir + vec4(uv.x, uv.y, 0, 0));

        cast_result res = cast_ray(pos, dir);
        if (res.valid) {
            color += res.normal.xyz * 15;
        }
    } else if (x < 0.5 && y >= 0.5) {
        uv = vec2(x, y - 0.5) * 2.0 * 2.0 - 1.0;
        uv.x *= WIDTH / float(HEIGHT);
        vec4 pos = vec4(0, 0, 0, 2);
        //    vec3 dir = worlddir;
        uv /= 30.0;
        vec4 dir = normalize(vec4(PushConstants.lookat - pos));
        dir = normalize(dir + vec4(0, uv.x, uv.y, 0));

        cast_result res = cast_ray(pos, dir);
        if (res.valid) {
            color += res.normal.xyz * 15;
        }
    } else if (x >= 0.5 && y >= 0.5) {
        uv = vec2(x - 0.5, y - 0.5) * 2.0 * 2.0 - 1.0;
        uv.x *= WIDTH / float(HEIGHT);
        vec4 pos = vec4(0, 0, 0, 2);
        //    vec3 dir = worlddir;
        uv /= 30.0;
        vec4 dir = normalize(vec4(PushConstants.lookat - pos));
        dir = normalize(dir + vec4(uv.x, 0, uv.y, 0));

        cast_result res = cast_ray(pos, dir);
        if (res.valid) {
            color += res.normal.xyw * 15;
        }
    }

    // Light
//    vec3 ambientlight = vec3(0.1, 0.1, 0.1);
//    vec3 ambientcolor = color * ambientlight;
//
//    vec3 lightdir = normalize(vec3(0, -1, -1));
//    vec3 diffusecolor = vec3(0);
//    vec3 lightcolor = vec3(1);
//    diffusecolor = color * lightcolor * max(dot(-lightdir, res.normal), 0);
//
//    vec3 light = max(ambientcolor, diffusecolor);

    imageStore(resultImage, ivec2(gl_GlobalInvocationID.xy), vec4(color, 1));

}
